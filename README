Android cellphone App Wifi Bluethooth gpio experiments on the following SBC's:
rpi4b  ( Raspberry Pi 4B )
radxa  ( Rock Pi 4B plus )
rk3328 ( Renegade ROC-RK3328-CC )
tinker ( ASUS TinkerBoard )

Server program runs on SBC's. Client program runs on Android cellphone.

Parts required:
1. Seeed Grove starter kit LED.
2. Grove-LCD RGB Backlight V3.0 JHD1313M2.
3. Analog Servo.
4. USB wifi dongle and ASUS BT500 USB bluetooth dongle.
5. Android cellphone.

The following 3 tests are included: ( see below for tests summary )
1. led test
2. i2c lcd test
3. servo

Steps to build build-androidapp-gpio sdcard image:

1. git clone https://github.com/philipchen888/build-androidapp-gpio.git
   sudo apt-get install build-essential git libssl-dev nmap net-tools libncurses5-dev libncursesw5-dev dnsutils vsftpd ftp binfmt-support qemu-user-static scons libncurses5-dev libncursesw5-dev libdbus-glib-1-dev libbluetooth-dev python-dev python-setuptools python3-dev python3-pip python3-setuptools libcurl4-openssl-dev gettext dbus-x11 chrpath diffstat gawk texinfo curl flex bison device-tree-compiler python swig android-tools-adb

2. Install cross compiler, live-build, java, gradle and android studio:
   wget https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
   sudo tar xvf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz  -C /usr/local/
   wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz
   sudo tar xvf gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz -C /usr/local/
   sudo apt-get install debootstrap debhelper kpartx gdisk devscripts dh-systemd isolinux po4a
   wget http://deb.debian.org/debian/pool/main/l/live-build/live-build_20230502.tar.xz
   tar xvf live-build_20230502.tar.xz
   cd live-build
   vi Makefile ( change manpages/$${LANGUAGE} to manpages/po/$${LANGUAGE} )
   sudo make install

   java -version
   Download gradle 8.1.1 from https://gradle.org/releases/
   sudo apt-get install openjdk-17-jdk openjdk-17-jre
   sudo vi /etc/environment ( add JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64" )
   source /etc/environment
   echo $JAVA_HOME
   java -version
   javac -version
   Download Android studio from https://developer.android.com/studio
   cd ~/Downloads; \rm -rf android-studio; tar -xzf android-studio-2022.3.1.19-linux.tar.g
z; vi ~/Downloads/android-studio/Install-Linux-tar.txt
   cd ~/Downloads/android-studio/bin; ./studio.sh
   File -> Settings -> Editor -> Live Edit -> select Live Edit and push automatic -> Apply

3. cd ~/build-androidapp-gpio/rpi4b
   git clone https://github.com/raspberrypi/linux --depth=1 -b rpi-5.4.y
   cd linux; mkdir tmp; cd tmp; mkdir lib;
   cd ../../; mkdir out;

   make all
   The result is in ./out/sdcard.img
   make cleanall

   sudo dd if=./out/sdcard.img of=/dev/sda bs=4096 conv=notrunc,fsync
   Eject sdcard, plugin sdcard, cp ./gpiotest/* /media/$USER/b*/home/linaro
   sync
   Eject sdcard

4. cd ~/build-androidapp-gpio/radxa
   git clone https://github.com/u-boot/u-boot.git -b u-boot-2023.07.y
   git clone https://github.com/radxa/kernel --depth=1 -b release-4.4-rockpi4
   cd kernel; mkdir tmp; cd tmp; mkdir lib;
   cd ../../; mkdir out;

   make all
   The result is in ./out/sdcard.img
   make cleanall

   sudo dd if=./out/sdcard.img of=/dev/sda bs=4096 conv=notrunc,fsync
   Eject sdcard, plugin sdcard, cp ./gpiotest/* /media/$USER/b*/home/linaro
   sync
   Eject sdcard

5. cd ~/build-androidapp-gpio/rk3328
   git clone https://github.com/u-boot/u-boot.git -b u-boot-2023.07.y
   git clone https://github.com/FireflyTeam/kernel --depth=1 -b rk3328/firefly
   cd kernel; mkdir tmp; cd tmp; mkdir lib;
   cd ../../; mkdir out;

   make all
   The result is in ./out/sdcard.img
   make cleanall

   sudo dd if=./out/sdcard.img of=/dev/sda bs=4096 conv=notrunc,fsync
   Eject sdcard, plugin sdcard, cp ./gpiotest/* /media/$USER/b*/home/linaro
   sync
   Eject sdcard

6. cd ~/build-androidapp-gpio/tinker
   git clone https://github.com/TinkerBoard/debian_u-boot.git --depth=1 -b release
   git clone https://github.com/TinkerBoard/debian_kernel.git --depth=1 -b release
   cd debian_kernel; mkdir tmp; cd tmp; mkdir lib;
   cd ../../; mkdir out;

   make all
   The result is in ./out/sdcard.img
   make cleanall

   sudo dd if=./out/sdcard.img of=/dev/sda bs=4096 conv=notrunc,fsync
   Eject sdcard, plugin sdcard, cp ./gpiotest/* /media/$USER/b*/home/linaro
   sync
   Eject sdcard

Plugin ASUS BT500 USB bluetooth dongle to SBC.
Plugin usb wifi dongle to rk3328.
Plugin sdcard to SBC
Login:
username: linaro
password: linaro
uname -a
lsb_release -a
Setup wifi:
nmcli dev wifi connect "SSID" password "PASSWORD"
sudo dpkg-reconfigure tzdata
sudo dpkg-reconfigure locales
date
sudo apt update
sudo apt upgrade
sync

sudo apt-get install python-dev python-setuptools python3-pip python3-setuptools python3-dev python3-wheel python3-smbus libbluetooth-dev
sudo pip3 install pybluez

sudo vi /etc/systemd/system/dbus-org.bluez.service
append -C to the end of line start with ExecStart
sync
sudo reboot

Test gpio using bluetooth:
On SBC:
hcitool dev
bluetoothctl pairable on
bluetoothctl discoverable on
hcitool scan

Make sure pair cellphone bluetooth with SBC bluetooth ( linaro-alip )

On SBC:
sudo ./rfcomm-server-gpio.py
On Android cellphone:
Install and run Testgpio app:
Settings -> About phone -> Tap Build number 7 times -> back -> System -> Developer options -> turn on both USB debugging and Disable adb timeout.  
Plugin USB cable from PC to Android cellphone. 
On PC: adb devices, adb install -r ~/build-androidapp-gpio/Testgpio.apk
Unplug USB cable. Swipe up Android cellphone screen to run the app Testgpio.

Test gpio using wifi:
On SBC:
sudo ./server-gpio.py
On Android cellphone:
Install and run Testgpiowifi app:
Plugin USB cable from PC to Android cellphone. 
On PC: adb devices, adb install -r ~/build-androidapp-gpio/Testgpiowifi.apk
Unplug USB cable. Swipe up Android cellphone screen to run the app Testgpiowifi.

Check kernel driver readiness for rpi4b:
sudo cat /proc/device-tree/soc/pwm@7e20c000/status  ( pwm 1 )
sudo cat /proc/device-tree/soc/i2c@7e804000/status  ( i2c-1 )

Check kernel driver readiness for radxa:
sudo cat /proc/device-tree/pwm@ff420010/status  ( pwm 1 )
sudo cat /proc/device-tree/i2c@ff160000/status  ( i2c-7 )

Check kernel driver readiness for rk3328:
sudo cat /proc/device-tree/pwm@ff1b0020/status  ( pwm 2 )
sudo cat /proc/device-tree/i2c@ff160000/status  ( i2c-1 )

Check kernel driver readiness for tinker:
sudo cat /proc/device-tree/pwm@ff680030/status  ( pwm 3 )
sudo cat /proc/device-tree/i2c@ff140000/status  ( i2c-1 )

-----------------------------------------------------------------------------

Here are the summary of the tests:

These tests used Seeed Grove starter kit LED, Grove-LCD RGB Backlight V3.0 JHD1313M2 and Analog Servo.

1. led test.
   This test will turn led on off.
   Connect gpio pin 16 to led control. ( rpi4b ).
   Connect gpio pin 18 to led control. ( radxa ).
   Connect gpio pin 16 to led control. ( rk3328 ).
   Connect gpio pin 18 to led control. ( tinker ).
   Connect gpio pin  2 to led 5V.
   Connect gpio pin  9 to led ground.

2. i2c lcd test.
   This test will change lcd backlight color.
   Connect gpio pin  3 to lcd display SDA. ( rpi4b i2c-1 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin  3 to lcd display SDA. ( radxa i2c-7 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin 27 to lcd display SDA. ( rk3328 i2c-1 ).
   Connect gpio pin 28 to lcd display SCL.
   Connect gpio pin  3 to lcd display SDA. ( tinker i2c-1 ).
   Connect gpio pin  5 to lcd display SCL.
   Connect gpio pin  2 to lcd display 5V.
   Connect gpio pin  9 to lcd display ground.

3. servo.
   This test will turn servo 45 degree - 90 degree - 0 degree etc.
   Connect gpio pin 33 to servo control. ( rpi4b pwm 1 ).
   Connect gpio pin 13 to led control.   ( radxa pwm 1 ).
   Connect gpio pin 12 to led control.   ( rk3328 pwm 2 ).
   Connect gpio pin 32 to led control.   ( tinker pwm 3 ).
   Connect gpio pin  2 to servo 5V.
   Connect gpio pin  9 to servo ground.

-----------------------------------------------------------------------------

See rfcomm example : https://people.csail.mit.edu/albert/bluez-intro/x502.html

-----------------------------------------------------------------------------
